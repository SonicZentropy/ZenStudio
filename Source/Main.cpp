/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainHostWindow.h"
#include <Memory>

Component* createMainContentComponent();

//==============================================================================
class ZenStudioApplication  : public JUCEApplication
{
public:
    //==============================================================================
    ZenStudioApplication() {}

    const String getApplicationName() override       { return ProjectInfo::projectName; }
    const String getApplicationVersion() override    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed() override       { return true; }

    //==============================================================================
    void initialise (const String& commandLine) override
    {
        // This method is where you should put your application's initialisation code..
		PropertiesFile::Options options;
		options.applicationName = getApplicationName();
		options.filenameSuffix = "settings";

		appProperties = new ApplicationProperties();
		appProperties->setStorageParameters(options);

		LookAndFeel::setDefaultLookAndFeel(&lookAndFeel);
				
        mainWindow = new MainHostWindow (getApplicationName());
		mainWindow->setUsingNativeTitleBar(true);

		commandManager.registerAllCommandsForTarget(this);
		//commandManager.registerAllCommandsForTarget(mainWindow);
		std::unique_ptr<int> testPtr(new int(3));
    }

    void shutdown() override
    {
        // Add your application's shutdown code here..

        mainWindow = nullptr; // (deletes our window)
    }

    //==============================================================================
    void systemRequestedQuit() override
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        //quit();
		if (mainWindow != nullptr)
			mainWindow->tryToQuitApplication();
		else
			quit();
    }

    void anotherInstanceStarted (const String& commandLine) override
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    //==============================================================================
    /*

    */
    
	//Member vars

	ApplicationCommandManager commandManager;
	ScopedPointer<ApplicationProperties> appProperties;
	LookAndFeel_V3 lookAndFeel;

private:
    ScopedPointer<MainHostWindow> mainWindow;
};

static ZenStudioApplication& getApp()
{
	return *dynamic_cast<ZenStudioApplication*>(JUCEApplication::getInstance());
}

ApplicationCommandManager& getCommandManager()
{
	return getApp().commandManager;
}

ApplicationProperties& getAppProperties()
{
	return *getApp().appProperties;
}
//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (ZenStudioApplication)
